<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: storm | P. Taylor Goetz]]></title>
  <link href="http://ptgoetz.github.io/blog/categories/storm/atom.xml" rel="self"/>
  <link href="http://ptgoetz.github.io/"/>
  <updated>2013-11-26T21:59:55-05:00</updated>
  <id>http://ptgoetz.github.io/</id>
  <author>
    <name><![CDATA[P. Taylor Goetz]]></name>
    <email><![CDATA[ptgoetz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Storm On OSX 10.9 (Mavericks)]]></title>
    <link href="http://ptgoetz.github.io/blog/2013/11/26/building-storm-on-osx-mavericks/"/>
    <updated>2013-11-26T16:11:00-05:00</updated>
    <id>http://ptgoetz.github.io/blog/2013/11/26/building-storm-on-osx-mavericks</id>
    <content type="html"><![CDATA[<p>Nearly a year ago to the day, my freind and coleague Brian O'Neill <a href="http://brianoneill.blogspot.com/2012/11/compiling-storm-and-jzmq-on-mac-osx.html">blogged about building storm on OSX</a>. I had been through that pain two years ago, and largely forgot about it (once you get 0mq and JZMQ installed you're largely in the clear). That is until today, when I had to set up a storm development environment on a new laptop...</p>

<p>Things have changed since then. Apple has released OSX 10.9 (Mavericks) and turned over development of the OSX JDK to Oracle, adding a little more salt to the wound.</p>

<p>Hopefully this will spare a few others from that pain.</p>

<h3>JDK 6/7</h3>

<p>On a fresh install of OSX 10.9 (no JDK installed), when you <code>java -version</code> from the command line you will get a prompt to <a href="http://www.java.com/en/download/index.jsp">download Java 7 from Oracle</a>. But what if you need JDK 6?</p>

<p>Some Java applications can trigger the install of JDK 6 via software update. In my case it was Intellij IDEA. But one utility that Apple added to OSX was the  <code>/usr/libexec/java_home</code> executable, which will output a path suitable for use as <code>JAVA_HOME</code> value. Without arguments, it will output the path for the default JDK:</p>

<p><code>
$ export JAVA_HOME=$(/usr/libexec/java_home)
$ echo $JAVA_HOME
/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home
$ java -version
java version "1.7.0_45"
Java(TM) SE Runtime Environment (build 1.7.0_45-b18)
Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)
</code>
You can also specify a certain version (running this <em>should</em> trigger an install of JDK 6 via software update -- I'm not sure because Intellij had already triggered it in my situation):</p>

<p><code>
$ export JAVA_HOME=$(/usr/libexec/java_home -v1.6)
$ echo $JAVA_HOME
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
$ java -version
java version "1.6.0_65"
Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)
Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)
</code></p>

<p>So now we have a way to easily switch between JDK 6 and 7.</p>

<p>If you need to download Java 6 manually, there is a <code>.dmg</code> file <a href="http://support.apple.com/kb/DL1572">available from Apple</a>.</p>

<h3>Install Xcode and Command Line Tools</h3>

<p>Xcode is easy to install via the App Store. You will also need the command line tools for compiling various things. You can trigger the install of the command line tools by invoking one of the stubs of the tools included, e.g.:</p>

<p><code>
/usr/bin/strings
</code></p>

<h3>Install <a href="http://brew.sh/">Homebrew</a></h3>

<p>Homebrew is like a package manager for OSX that handles download, compilation, and installation of various tools and libraries. We will use it later to install dependencies.</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
brew doctor
</code></p>

<p>If the <code>brew doctor</code> command completes without error, you're ready to move on.</p>

<h3>Install 0mq</h3>

<p>The <a href="https://github.com/nathanmarz/storm/wiki/Setting-up-a-Storm-cluster">Storm documentation</a> recommends using 0mq version 2.1.7, however I've found that 2.1.7 will not build on OS X 10.9 (Mavericks). The closest version I've found that will build under Mavericks is 2.1.9.</p>

<p>The new/preferred method is to use <code>brew tap homebrew/versions</code>, however that repository does not have 0mq 2.1.9. The fallback method is to use the <code>brew versions</code> command to find and checkout a specific version:</p>

<p><code>
brew versions zeromq
cd /usr/local
git checkout 381c97f Library/Formula/zeromq.rb
brew install zeromq
</code></p>

<h3>Install JZMQ (Java bindings for 0mq)</h3>

<p>Compiling and instlling JZMQ is where most of pain comes in, and most of the errors that come out of the build process are cryptic.</p>

<p>Follow the steps below exactly and you should be spared that pain:</p>

<p>```
git clone https://github.com/nathanmarz/jzmq.git</p>

<p>brew install pkg-config
brew install automake
brew install libtool</p>

<p>export JAVA_HOME=$(/usr/libexec/java_home -v1.6)
sudo ln -s /System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers/ /Library/Java/Home/include</p>

<p>cd jzmq
./autogen.sh
./configure
touch src/classdist_noinst.stamp
cd src
javac -d . org/zeromq/*.java
cd ../
make
sudo make install
```</p>

<p>The <code>pkg-config</code>, <code>automake</code>, and <code>libtool</code> are dependencies of the JZMQ build process. After installing those, we switch to JDK 6. Next we symlink the JDK 6 header directory where the JZMQ build process will be able to find it. Without it you will get an error like:</p>

<p><code>
cannot find jni_md.h in /Library/Java/Home/include
</code></p>

<p>The <code>touch src/classdist_noinst.stamp</code> command prevents the following error:</p>

<p><code>
No rule to make target `classdist_noinst.stamp'
</code></p>

<p>Next, we manually compile the JZMQ java sources. Without that step, you will get the following error:</p>

<p><code>
error: cannot access org.zeromq.ZMQ
class file for org.zeromq.ZMQ not found
javadoc: error - Class org.zeromq.ZMQ not found.
Error: No classes were specified on the command line.  Try -help.
make[1]: *** [org_zeromq_ZMQ.h] Error 15
make: *** [all-recursive] Error 1
</code></p>

<p>Finally, we compile and install JZMQ.</p>

<h3>Install <a href="http://leiningen.org/">Leiningen</a></h3>

<p>Leiningen is the build tool used by storm. It is similar to Maven and Gradle, but much more suited to clojure development.</p>

<p>Installing Leiningen is just a matter of downloading the script and making it executable:</p>

<p><code>
curl https://raw.github.com/technomancy/leiningen/stable/bin/lein -o ~/bin/lein
chmod +x ~/bin/lein
</code>
The above commands assume you have a <code>~/bin</code> directory and it is added to your <code>PATH</code>. The easiest way to do that is in a <code>.bash_profile</code> file:</p>

<p><code>
mkdir ~/bin
echo PATH=\$PATH:~/bin &gt;&gt; ~/.bash_profile
</code></p>

<h3>Build Storm</h3>

<p>Now we're finally ready to build storm:</p>

<p><code>
git clone https://github.com/nathanmarz/storm.git
cd storm
lein sub install
</code>
This will build and install the storm jars so they can be used as dependencies in other Leiningen/Maven/Gradle/etc. projects. If you want to create a distribution ZIP archive, run the following script:</p>

<p><code>
sh ./bin/build_release.sh
</code></p>

<p>Hopefully this will save some future storm contributors some time Googling cryptic errors.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Sample Code Matters]]></title>
    <link href="http://ptgoetz.github.io/blog/2013/05/01/why-sample-code-matters/"/>
    <updated>2013-05-01T15:52:00-04:00</updated>
    <id>http://ptgoetz.github.io/blog/2013/05/01/why-sample-code-matters</id>
    <content type="html"><![CDATA[<p>Whenever you write code samples for an API or library -- or even a blog post -- you should treat it as though you are writing the production guidance system for the space shuttle. Okay, that may be a little extreme, but you should at least make your best effort to ensure the code is error free and follows best practices. Why? Any bugs, vulnerabilities, anti-patterns, or cruft of any kind <strong><em>will replicate like drunken bunnies.</em></strong></p>

<p><img src="/images/lots-of-bunnies.gif" title="Can't hold their liquor." alt="Bunnies" /></p>

<p>In a blog post titled <a href="http://www.viva64.com/en/b/0199/">Why Windows 8 drivers are buggy</a> Andrey Karpov discusses what he found when performing static analysis on Windows 8 driver examples published by Microsoft. In short, those examples aren't exactly stellar. But they're just examples and aren't that important, right? I beg to differ.</p>

<p>In my opinion, the salient point of the article is best summarized in the following paragraph (emphasis mine):</p>

<blockquote><p>"<del>Bugs in samples are not that critical as bugs in real-life software.</del> Nevertheless, bugs can migrate from samples to real-life projects and cause developers a lot of troubles. Even within the Windows 8 Driver Samples pack we found identical bugs. The reason is obvious: copying-and-pasting a code fragment from a nearby sample. In the same way these errors will get into real-life drivers."</p></blockquote>

<p>In fact, I would rearrange that first sentence to read: <em>"Bugs in samples will become critical bugs in real-life software."</em></p>

<p>The evils of <em>copying-and-pasting</em> aside, the truth is that developers reading your sample code will likely (perhaps blindly) trust that a given example is the right way to do things. Like it or not, when writing examples you are acting as a teacher and can't make any assumptions about your pupils.</p>

<p>To illustrate how sample code can proliferate, consider <a href="https://github.com/nathanmarz/storm-starter/commit/91550313b5288e9c059165e6ce8bad180fb764cb#diff-e9057e0def4e5aa863bdc4a6fdb98fe3R42">this commit</a> to the <a href="">storm-starter project</a>. That was from two years ago, shortly after storm had been open-sourced. The impetus was to help people more familiar with java/Maven than clojure/Leiningen get started with storm. Since then, that code/comment has proliferated fairly far and wide, as can be seen from a <a href="https://www.google.com/#filter=0&amp;q=%22keep+storm+out+of+the+jar-with-dependencies%22">google search for "keep storm out of the jar-with-dependencies"</a>. In retrospect, I should have used the <a href="http://maven.apache.org/plugins/maven-shade-plugin/">maven shade plugin</a> instead, since it plays better with certain frameworks like Spring. Not a big deal, but the <del>cat</del> drunken bunny is out of the bag and on a love mission.</p>

<p>I'll admit that I'm in no way perfect in this respect. But I strive toward that goal and believe that all serious developers should as well.</p>

<p>Let's keep the drunken bunnies at bay. ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Storm at NYC* Big Data Tech Day]]></title>
    <link href="http://ptgoetz.github.io/blog/2013/04/08/storm-at-nyc-star-big-data-tech-day/"/>
    <updated>2013-04-08T22:42:00-04:00</updated>
    <id>http://ptgoetz.github.io/blog/2013/04/08/storm-at-nyc-star-big-data-tech-day</id>
    <content type="html"><![CDATA[<p>I recently had the opportunity to present at <a href="http://www.datastax.com/nycassandra2013/">NYC* Big Data Tech Day</a> with <a href="http://brianoneill.blogspot.com">Brian O'Neill</a> to speak about some of the work we've been doing at <a href="http://www.healthmarketscience.com">HMS</a>, developing our platform for real-time Master Data Management.</p>

<p>Our approach leverages <a href="http://storm-project.net">Storm</a>, <a href="http://cassandra.apache.org">Cassandra</a>, <a href="http://kafka.apache.org">Kafka</a>, and <a href="http://www.elasticsearch.org">Elastic Search</a> to gather data from thousands of data sources, and meld them together in near real time, to produce a single high quality health care practitioner database.</p>

<p>Our talk was titled "A Big Data Quadfecta: Cassandra, Storm, Elastic Search and Kafka" and should resonate with any beer enthusiasts!</p>

<p>Slides and video below. Unfortunately the slides are not visible in the video, but you can hopefully follow along (somewhat) with the embedded slides.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/jBauMkzSgRQ" frameborder="0" allowfullscreen></iframe>




<iframe src="http://www.slideshare.net/slideshow/embed_code/17516652" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Philadelphia Cassandra User Group]]></title>
    <link href="http://ptgoetz.github.io/blog/2013/03/07/philadelphia-cassandra-user-group/"/>
    <updated>2013-03-07T00:02:00-05:00</updated>
    <id>http://ptgoetz.github.io/blog/2013/03/07/philadelphia-cassandra-user-group</id>
    <content type="html"><![CDATA[<p>Last night we kicked off the first meeting of the <a href="http://www.meetup.com/Philadelphia-Cassandra-Users/">Philadelphia Cassandra Users Group</a> hosted at <a href="http://www.healthmarketscience.com">HMS</a>.</p>

<p>We had a really good turnout, with a broad range of C* users and admins. I presented on our use of storm and cassandra at <a href="http://www.healthmarketscience.com">HMS</a>.</p>

<p>Thanks to Brady Gentile from DataStax, and my HMS colleagues Alex Collautt and Brian O'Neill for making the arrangements.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/17067371" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe>

]]></content>
  </entry>
  
</feed>
