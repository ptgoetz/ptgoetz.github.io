<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mavericks | P. Taylor Goetz]]></title>
  <link href="http://ptgoetz.github.io/blog/categories/mavericks/atom.xml" rel="self"/>
  <link href="http://ptgoetz.github.io/"/>
  <updated>2013-11-26T21:59:55-05:00</updated>
  <id>http://ptgoetz.github.io/</id>
  <author>
    <name><![CDATA[P. Taylor Goetz]]></name>
    <email><![CDATA[ptgoetz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building Storm On OSX 10.9 (Mavericks)]]></title>
    <link href="http://ptgoetz.github.io/blog/2013/11/26/building-storm-on-osx-mavericks/"/>
    <updated>2013-11-26T16:11:00-05:00</updated>
    <id>http://ptgoetz.github.io/blog/2013/11/26/building-storm-on-osx-mavericks</id>
    <content type="html"><![CDATA[<p>Nearly a year ago to the day, my freind and coleague Brian O'Neill <a href="http://brianoneill.blogspot.com/2012/11/compiling-storm-and-jzmq-on-mac-osx.html">blogged about building storm on OSX</a>. I had been through that pain two years ago, and largely forgot about it (once you get 0mq and JZMQ installed you're largely in the clear). That is until today, when I had to set up a storm development environment on a new laptop...</p>

<p>Things have changed since then. Apple has released OSX 10.9 (Mavericks) and turned over development of the OSX JDK to Oracle, adding a little more salt to the wound.</p>

<p>Hopefully this will spare a few others from that pain.</p>

<h3>JDK 6/7</h3>

<p>On a fresh install of OSX 10.9 (no JDK installed), when you <code>java -version</code> from the command line you will get a prompt to <a href="http://www.java.com/en/download/index.jsp">download Java 7 from Oracle</a>. But what if you need JDK 6?</p>

<p>Some Java applications can trigger the install of JDK 6 via software update. In my case it was Intellij IDEA. But one utility that Apple added to OSX was the  <code>/usr/libexec/java_home</code> executable, which will output a path suitable for use as <code>JAVA_HOME</code> value. Without arguments, it will output the path for the default JDK:</p>

<p><code>
$ export JAVA_HOME=$(/usr/libexec/java_home)
$ echo $JAVA_HOME
/Library/Java/JavaVirtualMachines/jdk1.7.0_45.jdk/Contents/Home
$ java -version
java version "1.7.0_45"
Java(TM) SE Runtime Environment (build 1.7.0_45-b18)
Java HotSpot(TM) 64-Bit Server VM (build 24.45-b08, mixed mode)
</code>
You can also specify a certain version (running this <em>should</em> trigger an install of JDK 6 via software update -- I'm not sure because Intellij had already triggered it in my situation):</p>

<p><code>
$ export JAVA_HOME=$(/usr/libexec/java_home -v1.6)
$ echo $JAVA_HOME
/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home
$ java -version
java version "1.6.0_65"
Java(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)
Java HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)
</code></p>

<p>So now we have a way to easily switch between JDK 6 and 7.</p>

<p>If you need to download Java 6 manually, there is a <code>.dmg</code> file <a href="http://support.apple.com/kb/DL1572">available from Apple</a>.</p>

<h3>Install Xcode and Command Line Tools</h3>

<p>Xcode is easy to install via the App Store. You will also need the command line tools for compiling various things. You can trigger the install of the command line tools by invoking one of the stubs of the tools included, e.g.:</p>

<p><code>
/usr/bin/strings
</code></p>

<h3>Install <a href="http://brew.sh/">Homebrew</a></h3>

<p>Homebrew is like a package manager for OSX that handles download, compilation, and installation of various tools and libraries. We will use it later to install dependencies.</p>

<p><code>
ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go/install)"
brew doctor
</code></p>

<p>If the <code>brew doctor</code> command completes without error, you're ready to move on.</p>

<h3>Install 0mq</h3>

<p>The <a href="https://github.com/nathanmarz/storm/wiki/Setting-up-a-Storm-cluster">Storm documentation</a> recommends using 0mq version 2.1.7, however I've found that 2.1.7 will not build on OS X 10.9 (Mavericks). The closest version I've found that will build under Mavericks is 2.1.9.</p>

<p>The new/preferred method is to use <code>brew tap homebrew/versions</code>, however that repository does not have 0mq 2.1.9. The fallback method is to use the <code>brew versions</code> command to find and checkout a specific version:</p>

<p><code>
brew versions zeromq
cd /usr/local
git checkout 381c97f Library/Formula/zeromq.rb
brew install zeromq
</code></p>

<h3>Install JZMQ (Java bindings for 0mq)</h3>

<p>Compiling and instlling JZMQ is where most of pain comes in, and most of the errors that come out of the build process are cryptic.</p>

<p>Follow the steps below exactly and you should be spared that pain:</p>

<p>```
git clone https://github.com/nathanmarz/jzmq.git</p>

<p>brew install pkg-config
brew install automake
brew install libtool</p>

<p>export JAVA_HOME=$(/usr/libexec/java_home -v1.6)
sudo ln -s /System/Library/Frameworks/JavaVM.framework/Versions/Current/Headers/ /Library/Java/Home/include</p>

<p>cd jzmq
./autogen.sh
./configure
touch src/classdist_noinst.stamp
cd src
javac -d . org/zeromq/*.java
cd ../
make
sudo make install
```</p>

<p>The <code>pkg-config</code>, <code>automake</code>, and <code>libtool</code> are dependencies of the JZMQ build process. After installing those, we switch to JDK 6. Next we symlink the JDK 6 header directory where the JZMQ build process will be able to find it. Without it you will get an error like:</p>

<p><code>
cannot find jni_md.h in /Library/Java/Home/include
</code></p>

<p>The <code>touch src/classdist_noinst.stamp</code> command prevents the following error:</p>

<p><code>
No rule to make target `classdist_noinst.stamp'
</code></p>

<p>Next, we manually compile the JZMQ java sources. Without that step, you will get the following error:</p>

<p><code>
error: cannot access org.zeromq.ZMQ
class file for org.zeromq.ZMQ not found
javadoc: error - Class org.zeromq.ZMQ not found.
Error: No classes were specified on the command line.  Try -help.
make[1]: *** [org_zeromq_ZMQ.h] Error 15
make: *** [all-recursive] Error 1
</code></p>

<p>Finally, we compile and install JZMQ.</p>

<h3>Install <a href="http://leiningen.org/">Leiningen</a></h3>

<p>Leiningen is the build tool used by storm. It is similar to Maven and Gradle, but much more suited to clojure development.</p>

<p>Installing Leiningen is just a matter of downloading the script and making it executable:</p>

<p><code>
curl https://raw.github.com/technomancy/leiningen/stable/bin/lein -o ~/bin/lein
chmod +x ~/bin/lein
</code>
The above commands assume you have a <code>~/bin</code> directory and it is added to your <code>PATH</code>. The easiest way to do that is in a <code>.bash_profile</code> file:</p>

<p><code>
mkdir ~/bin
echo PATH=\$PATH:~/bin &gt;&gt; ~/.bash_profile
</code></p>

<h3>Build Storm</h3>

<p>Now we're finally ready to build storm:</p>

<p><code>
git clone https://github.com/nathanmarz/storm.git
cd storm
lein sub install
</code>
This will build and install the storm jars so they can be used as dependencies in other Leiningen/Maven/Gradle/etc. projects. If you want to create a distribution ZIP archive, run the following script:</p>

<p><code>
sh ./bin/build_release.sh
</code></p>

<p>Hopefully this will save some future storm contributors some time Googling cryptic errors.</p>
]]></content>
  </entry>
  
</feed>
